// Minimal Bootstrap 5.3.0 bundle for AnyVideo extension
// This is a simplified version to avoid CSP violations

(function() {
  'use strict';
  
  // Basic Bootstrap utilities
  window.bootstrap = window.bootstrap || {};
  
  // Offcanvas functionality
  class Offcanvas {
    constructor(element) {
      this.element = element;
      this.init();
    }
    
    init() {
      this.element.addEventListener('click', (e) => {
        if (e.target.classList.contains('btn-close') || e.target.closest('.btn-close')) {
          this.hide();
        }
      });
    }
    
    show() {
      this.element.classList.add('show');
      document.body.classList.add('offcanvas-open');
    }
    
    hide() {
      this.element.classList.remove('show');
      document.body.classList.remove('offcanvas-open');
    }
    
    toggle() {
      if (this.element.classList.contains('show')) {
        this.hide();
      } else {
        this.show();
      }
    }
  }
  
  // Collapse functionality
  class Collapse {
    constructor(element, options = {}) {
      this.element = element;
      this.options = options;
      this.isShown = false;
      this.init();
    }
    
    init() {
      // Add event listeners for show/hide events
      this.element.addEventListener('show.bs.collapse', () => {
        this.isShown = true;
      });
      
      this.element.addEventListener('hide.bs.collapse', () => {
        this.isShown = false;
      });
    }
    
    show() {
      if (this.isShown) return;
      
      this.element.classList.add('show');
      this.element.style.display = 'block';
      this.isShown = true;
      
      // Trigger custom event
      const event = new CustomEvent('show.bs.collapse');
      this.element.dispatchEvent(event);
    }
    
    hide() {
      if (!this.isShown) return;
      
      this.element.classList.remove('show');
      this.element.style.display = 'none';
      this.isShown = false;
      
      // Trigger custom event
      const event = new CustomEvent('hide.bs.collapse');
      this.element.dispatchEvent(event);
    }
    
    toggle() {
      if (this.isShown) {
        this.hide();
      } else {
        this.show();
      }
    }
  }
  
  // Tooltip functionality
  class Tooltip {
    constructor(element) {
      this.element = element;
      this.init();
    }
    
    init() {
      this.element.addEventListener('mouseenter', () => this.show());
      this.element.addEventListener('mouseleave', () => this.hide());
    }
    
    show() {
      const title = this.element.getAttribute('data-bs-title');
      if (!title) return;
      
      const tooltip = document.createElement('div');
      tooltip.className = 'tooltip fade show';
      tooltip.innerHTML = `
        <div class="tooltip-arrow"></div>
        <div class="tooltip-inner">${title}</div>
      `;
      
      document.body.appendChild(tooltip);
      this.tooltip = tooltip;
      
      // Position tooltip
      const rect = this.element.getBoundingClientRect();
      tooltip.style.position = 'fixed';
      tooltip.style.top = (rect.top - tooltip.offsetHeight - 5) + 'px';
      tooltip.style.left = (rect.left + rect.width / 2 - tooltip.offsetWidth / 2) + 'px';
    }
    
    hide() {
      if (this.tooltip) {
        this.tooltip.remove();
        this.tooltip = null;
      }
    }
  }
  
  // Initialize components
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize offcanvas
    document.querySelectorAll('.offcanvas').forEach(el => {
      new Offcanvas(el);
    });
    
    // Initialize tooltips
    document.querySelectorAll('[data-bs-title]').forEach(el => {
      new Tooltip(el);
    });
  });
  
  // Make classes available globally
  window.bootstrap = {
    Offcanvas,
    Collapse,
    Tooltip
  };
  
  // Add data-bs-dismiss functionality
  document.addEventListener('click', (e) => {
    if (e.target.hasAttribute('data-bs-dismiss')) {
      const target = e.target.getAttribute('data-bs-dismiss');
      const element = document.querySelector(target);
      if (element && element.bootstrap && element.bootstrap.hide) {
        element.bootstrap.hide();
      }
    }
  });
  
})(); 